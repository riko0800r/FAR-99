--[[
Estrutura do sistema de tracker na memória:
0xA000 - Área de áudio
  0xA000-0xA0FF: Canais (64 bytes por canal)
    00: Status (0=inativo, 1=ativo)
    01: Tipo de sample (0=waveform, 1=PCM)
    02: Volume (0-15)
    03: Volume atual
    04: Nota atual
    05: Efeito
    06: Parâmetro do efeito
    07: Ponteiro do sample (high byte)
    08: Ponteiro do sample (low byte)
    09: Tamanho do sample
    0A: Loop point (high)
    0B: Loop point (low)
    0C: Posição atual (high)
    0D: Posição atual (low)
    0E: Velocidade de reprodução
    0F: Contador de velocidade
    
0xB000 - Samples PCM (16KB)
0xC000 - Padrões (64 padrões)
  0xC000-0xC0FF: Cabeçalho
  0xC100-0xCFFF: Dados dos padrões

0xD000 - Tabela de ordens (256 bytes)
0xD100 - Tabela de instrumentos (256 entradas)
]]

-- Configuração do tracker
vm.tracker = {
    tempo = 125,
    speed = 6,
    current_pattern = 0,
    current_row = 0,
    tick = 0,
    order_pos = 0,
    playing = false,
    channels = {
        { note = 0, instrument = 0, volume = 15, effect = 0, param = 0 },
        { note = 0, instrument = 0, volume = 15, effect = 0, param = 0 },
        { note = 0, instrument = 0, volume = 15, effect = 0, param = 0 },
        { note = 0, instrument = 0, volume = 15, effect = 0, param = 0 }
    }
}

-- Tipos de efeitos
vm.FX = {
    NONE      = 0x0,
    SET_VOL   = 0xC,
    PORTAMENTO= 0x3,
    VIBRATO   = 0x4,
    ARPEGGIO  = 0x8,
    JUMP      = 0xB,
    BREAK     = 0xD,
    SPEED     = 0xF
}

-- Inicialização do sistema
function vm.init_tracker()
    -- Configurar canais
    for ch = 0, 3 do
        local base = 0xA000 + (ch * 64)
        vm.mem[base] = 0 -- Status
        vm.mem[base+2] = 15 -- Volume
    end
    
    -- Configurar instrumentos padrão
    for i = 0, 15 do
        vm.mem[0xD100 + i] = 0x80 + i -- Waveform básica + volume
    end
end

-- Processar uma linha do padrão
function vm.process_tracker_row()
    local pattern_addr = 0xC000 + (vm.tracker.current_pattern * 256)
    local row_addr = pattern_addr + 16 + (vm.tracker.current_row * 16)
    
    for ch = 0, 3 do
        local data = {
            note = vm.mem[row_addr + (ch * 4)],
            instr = vm.mem[row_addr + (ch * 4) + 1],
            effect = vm.mem[row_addr + (ch * 4) + 2],
            param = vm.mem[row_addr + (ch * 4) + 3]
        }
        
        if data.note > 0 then
            vm.play_note(ch, data.note, data.instr, data.effect, data.param)
        else
            vm.apply_effect(ch, data.effect, data.param)
        end
    end
end

-- Tocar uma nota
function vm.play_note(channel, note, instrument, effect, param)
    local ch_base = 0xA000 + (channel * 64)
    local freq = vm.note_to_freq(note)
    local instr_addr = 0xD100 + instrument
    
    -- Configurar instrumento
    vm.mem[ch_base + 1] = vm.mem[instr_addr]    -- Tipo
    vm.mem[ch_base + 2] = vm.mem[instr_addr + 1] -- Volume
    
    -- Configurar sample
    if bit32.band(vm.mem[instr_addr], 0x80) ~= 0 then
        local sample_id = bit32.band(vm.mem[instr_addr], 0x7F)
        vm.mem[ch_base + 7] = bit32.rshift(0xB000 + (sample_id * 256), 8)
        vm.mem[ch_base + 8] = bit32.band(0xB000 + (sample_id * 256), 0xFF)
        vm.mem[ch_base + 9] = vm.mem[instr_addr + 2] -- Tamanho
    end
    
    -- Configurar efeito
    vm.mem[ch_base + 5] = effect
    vm.mem[ch_base + 6] = param
    
    -- Ativar canal
    vm.mem[ch_base] = 1
    vm.tracker.channels[channel + 1].note = note
end

-- Aplicar efeito
function vm.apply_effect(channel, effect, param)
    local ch_base = 0xA000 + (channel * 64)
    local ch = vm.tracker.channels[channel + 1]
    
    if effect == vm.FX.SET_VOL then
        vm.mem[ch_base + 2] = param
    elseif effect == vm.FX.ARPEGGIO then
        ch.param = param
    elseif effect == vm.FX.PORTAMENTO then
        -- Implementar portamento
    end
end

-- Atualização do áudio
function vm.update_tracker(dt)
    if not vm.tracker.playing then return end
    
    vm.tracker.tick = vm.tracker.tick + 1
    if vm.tracker.tick >= vm.tracker.speed then
        vm.tracker.tick = 0
        vm.tracker.current_row = vm.tracker.current_row + 1
        
        if vm.tracker.current_row >= 64 then
            vm.tracker.current_row = 0
            vm.tracker.order_pos = vm.tracker.order_pos + 1
            vm.tracker.current_pattern = vm.mem[0xD000 + vm.tracker.order_pos]
        end
        
        vm.process_tracker_row()
    end
    
    -- Aplicar efeitos em tempo real
    for ch = 0, 3 do
        vm.process_effects(ch)
    end
end

-- Processar efeitos contínuos
function vm.process_effects(channel)
    local ch = vm.tracker.channels[channel + 1]
    local ch_base = 0xA000 + (channel * 64)
    
    -- Arpeggio
    if ch.effect == vm.FX.ARPEGGIO then
        local notes = {
            ch.note,
            ch.note + bit32.rshift(ch.param, 4),
            ch.note + bit32.band(ch.param, 0x0F)
        }
        local current = math.floor(vm.tracker.tick % 3)
        vm.mem[ch_base + 4] = notes[current + 1]
    end
    
    -- Vibrato
    if ch.effect == vm.FX.VIBRATO then
        local depth = bit32.rshift(ch.param, 4)
        local speed = bit32.band(ch.param, 0x0F)
        local mod = math.sin(vm.tracker.tick * speed) * depth
        vm.mem[ch_base + 4] = ch.note + mod
    end
end

-- API para o jogo
function vm.expose_api()
    return {
        music = {
            play = function(pattern)
                vm.tracker.current_pattern = pattern
                vm.tracker.playing = true
            end,
            stop = function()
                vm.tracker.playing = false
            end,
            set_tempo = function(tempo)
                vm.tracker.speed = math.floor(150 / tempo)
            end,
            
            -- Criar instrumento
            create_instrument = function(id, type, vol, sample)
                local addr = 0xD100 + id
                vm.mem[addr] = bit32.bor(type, bit32.lshift(vol, 4))
                vm.mem[addr + 1] = sample
            end,
            
            -- Criar padrão
            create_pattern = function(id, data)
                local addr = 0xC000 + (id * 256)
                for i = 1, #data do
                    vm.mem[addr + i - 1] = data[i]
                end
            end
        }
    }
end

-- Função de conversão nota-frequência
function vm.note_to_freq(note)
    return 440 * math.pow(2, (note - 69) / 12)
end

-- Mixador de áudio
function vm.tracker_mixer()
    local mix = 0
    for ch = 0, 3 do
        local ch_base = 0xA000 + (ch * 64)
        if vm.mem[ch_base] == 1 then
            local sample_pos = bit32.lshift(vm.mem[ch_base + 0xC], 8) + vm.mem[ch_base + 0xD]
            local sample = vm.mem[0xB000 + sample_pos]
            mix = mix + (sample * vm.mem[ch_base + 2]) / 64
        end
    end
    return vm.clamp(mix, -1, 1)
end

-- Modificar a função update_audio
function vm.update_audio(dt)
    vm.update_tracker(dt)
    
    local samples_needed = vm.audio.source:getFreeBufferCount() * 4096
    local sample_data = love.sound.newSoundData(samples_needed, 44100, 16, 1)
    
    for i = 0, samples_needed - 1 do
        sample_data:setSample(i, vm.tracker_mixer())
    end
    
    vm.audio.source:queue(sample_data)
end